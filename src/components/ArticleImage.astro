---
import { Image } from "astro:assets"
import type { ImageMetadata } from "astro"

interface Props {
	src: ImageMetadata
	alt: string
	imageDescription?: string
}

const { src, alt, imageDescription } = Astro.props

---

<div class="2xl:mx-[-50px] xl:mx-[-40px] lg:mx-[-30px] py-5 md:p-5 my-10 relative flex flex-col items-center">
    <div class="card-wrapper perspective">
        <Image
            src={src}
            alt={alt}
            class="w-auto article-image hover:cursor-pointer transition-transform duration-200"
        />
    </div>
    <span class="absolute top-[-14px] left-[-5px] text-lg">+</span>
    <span class="absolute bottom-[-14px] left-[-5px] text-lg">+</span>
    <span class="absolute top-[-14px] right-[-5px] text-lg">+</span>
    <span class="absolute bottom-[-14px] right-[-5px] text-lg">+</span>
    {imageDescription &&
        <p class="mt-2 max-w-prose text-center text-xs">{imageDescription}</p>
    }
</div>

<style>
	.perspective {
        perspective: 1000px;
        transform-style: preserve-3d;
    }

    .article-image {
        transform-style: preserve-3d;
        transition: transform 0.1s ease;
    }
</style>

<script>
const articleImages = document.getElementsByClassName("article-image")

const handle3DEffect = (image: HTMLImageElement, e: MouseEvent) => {
    const rect = image.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top

    const multiplier = 5
    const rotateX = ((y - rect.height / 2) / rect.height) * multiplier
    const rotateY = ((rect.width / 2 - x) / rect.width) * multiplier

    image.style.transform = `
        perspective(1000px)
        rotateX(${rotateX}deg)
        rotateY(${rotateY}deg)
        scale3d(1.05, 1.05, 1.05)
    `
}

const resetTransform = (image: HTMLImageElement) => {
    image.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)'
}

const createImageModal = (image: HTMLImageElement) => {
    const modal = document.createElement('div')
    Object.assign(modal.style, {
        position: 'fixed',
        top: '0',
        left: '0',
        width: '100%',
        height: '100%',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: '1000'
    })

    const img = image.cloneNode(true) as HTMLImageElement
    Object.assign(img.style, {
        maxWidth: '90%',
        maxHeight: '90vh',
        objectFit: 'contain',
        transform: 'none'
    })

    modal.appendChild(img)
    modal.addEventListener('click', () => document.body.removeChild(modal))
    document.body.appendChild(modal)
}

for (let i = 0; i < articleImages.length; i++) {
    const image = articleImages[i] as HTMLImageElement
    image.addEventListener('mousemove', (e) => handle3DEffect(image, e))
    image.addEventListener('mouseleave', () => resetTransform(image))
    image.addEventListener('click', () => createImageModal(image))
}
</script>
