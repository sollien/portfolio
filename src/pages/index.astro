---
import Layout from "@/layouts/Layout.astro"
import { supabase } from "@/lib/supabase"
import ContentHeader from "@/components/ContentHeader.astro"
import { Image } from "astro:assets"
import as_001 from "@/assets/images/generative_art/as_001.png"
import as_002 from "@/assets/images/generative_art/as_002.png"
import as_003 from "@/assets/images/generative_art/as_003.png"
import * as photo from "@/assets/images/photography/index"
import type { Route, ImageRoute, ImageType } from "@/interfaces"

let { data: books } = await supabase
	.from('books')
	.select('*')
	.order('date_read', { ascending: true })

const projects: Route[] = [
	{
		title: "Cortex",
		params: "/projects/cortex",
	},
	{
		title: "Pwr",
		params: "/projects/pwr",
	},
	{
		title: "SEO dashboard",
		params: "/projects/seo-dashboard",
	}
]

const generativeArt: ImageRoute[] = [
	{
		title: "as_001",
		params: "/generative-art/as_001",
		src: as_001,
		alt: "as_001"
	},
	{
		title: "as_002",
		params: "/generative-art/as_002",
		src: as_002,
		alt: "as_002"
	},
	{
		title: "as_003",
		params: "/generative-art/as_003",
		src: as_003,
		alt: "as_003"
	}
]

const photography: ImageType[] = [
	{
		src: photo.deadTree,
		alt: "A dead tree standing out amongst other trees"
	},
	{
		src: photo.fjellhaugenSmall,
		alt: "Lake by Fjellhaugen"
	},
	{
		src: photo.folgefonnaBaatSmall,
		alt: "A boat in a lake by Folgefonna"
	},
	{
		src: photo.laatefossen1Small,
		alt: "Låtefossen and a bridge seen from a river"
	},
	{
		src: photo.folgefonnaFjellSmall,
		alt: "Mountains by Folgefonna"
	},
	{
		src: photo.laatefossen2Small,
		alt: "Låtefossen seen from the side"
	},
	{
		src: photo.folgefonnaSteinerSmall,
		alt: "A heap of stones in a lake by Folgefonna"
	},
	{
		src: photo.oceanNeedles,
		alt: "The rock needles by Cannon Beach"
	},
	{
		src: photo.hotAirBalloonSmall,
		alt: "Air balloon above Grünerløkka in Oslo"
	},
	{
		src: photo.saltholmen1,
		alt: "Cabins by Saltholmen in Råde"
	},
	{
		src: photo.latourellFallsSmall,
		alt: "Latourell falls in Oregon"
	},
	{
		src: photo.latourellFallsDistanceSmall,
		alt: "Latourell falls in Oregon from a distance"
	},
	{
		src: photo.saltholmen2Small,
		alt: "Cabins and sunset by Saltholmen in Råde"
	},
	{
		src: photo.mbSmall,
		alt: "Old Mercedes-Benz"
	},
	{
		src: photo.osloEkeberg,
		alt: "Oslo city center seen from Ekeberg"
	},
	{
		src: photo.starSkyGCSmall,
		alt: "Starry night sky"
	},
	{
		src: photo.powerLinesSmall,
		alt: "Power lines by Trilium lakes in Oregon"
	},
	{
		src: photo.surveyorSmall,
		alt: "Beat down Surveyor car in Seattle"
	},
	{
		src: photo.spaceNeedle,
		alt: "The Space Needle in Seattle seen from below"
	},
]
---

<Layout title="Martin Sollien">
	<main>
		<section>
			<ContentHeader>
				<h2>Projects</h2>
			</ContentHeader>
			<div class="items-container">
				{
					projects.map((project) =>
					<a
						class="project-item"
						href={project.params}
					>
						{project.title}
					</a>)
				}
			</div>
		</section>
		<section>
			<ContentHeader>
				<h2>Generative art</h2>
			</ContentHeader>
			<div class="items-container">
				{
					generativeArt.map((art) =>
					<a
						class="project-item"
						href={art.params}
					>
						<Image
							src={art.src}
							alt={art.alt}
							width="100"
						/>
					</a>)
				}
			</div>
		</section>
		<section>
			<ContentHeader>
				<h2>Photography</h2>
			</ContentHeader>
			<div class="items-container">
				{
					photography.map((photo) =>
					<Image
						src={photo.src}
						alt={photo.alt}
						class="photography"
					/>)
				}
			</div>
		</section>
		<section>
			<ContentHeader subtitle="order::last_read">
				<h2>Books read</h2>
			</ContentHeader>
			<div class="books-container">
				{
					books && books.map((book) => (
						<a
							class="book-item"
							href={`/books/${book.id}`}
						>
							{book.title}
						</a>
					))
				}
			</div>
		</section>
	</main>
	<script>
		const photographies = document.querySelectorAll(".photography");

		photographies.forEach((photography) => {
			photography.addEventListener('click', () => {})
		})
	</script>
</Layout>


<style lang="scss">
	$text-glow: #121615;

	@mixin grid-cell {
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		text-overflow: ellipsis;
		overflow: hidden;
		font-size: 72%;

		&:hover {
			cursor: pointer;
			background-color: var(--main-color-85);
			text-shadow:
			0 0 10px #fff,
			0 0 20px #ffffff,
			0 0 30px $text-glow,
			0 0 40px $text-glow,
			0 0 50px $text-glow,
			0 0 60px $text-glow,
			0 0 70px $text-glow;
		}
	}

	@mixin border-offset {
		margin: -1px;
	}

	@mixin border-y-offset {
		margin-bottom: -1px;
		margin-top: -1px;
	}

	section {
		.items-container {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			margin: 0 30px;
			border-left: var(--default-border);
		}

		.books-container {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap-reverse;
			gap: 1px;
			margin: 0 30px;
			border-left: var(--default-border);
		}
	}

	.project-item {
		@include grid-cell;

		margin-top: -1px;
		margin-bottom: -1px;
		min-height: 100px;
		width: 100px;
		border: var(--default-border);
	}

	.book-item {
		@include grid-cell;
		@include border-offset;

		position: relative;
		justify-content: flex-start;
		padding: 10px 5px;
		height: 200px;
		border: var(--default-border);
		text-align: left;
		writing-mode: vertical-rl;
	}

	.photography {
		padding: 10px;
		height: 130px;
		width: auto;
		margin: -1px;
		margin-right: 0;
		margin-bottom: 0;
		border: var(--default-border);
	}
</style>
